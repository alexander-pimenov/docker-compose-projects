#Закомментировал это, т.к. это не работает на Windows
#драйвер логирования k8s-file, доступен только в Kubernetes (k8s), но не в обычном Docker (особенно на Windows).
#x-logging: &logging
#  driver: "k8s-file"
#  # driver: "json-file"
#  options:
#    max-size: "10m"
#    max-file: "3"

services:
  postgres:
    container_name: postgres
    image: docker.io/postgres:${POSTGRES_VERSION}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "keycloak"]
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    volumes:
      - type: tmpfs
        target: /var/lib/postgresql/data
        tmpfs:
          size: 100000000
    networks:
      - keycloak-grafana-prometheus-net
#    logging: *logging

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:${KC_VERSION}
    command: ["start-dev", "--import-realm"]
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
      KC_DB_URL: "jdbc:postgresql://postgres:5432/keycloak"
#      KC_DB_URL: "jdbc:postgresql://postgres:5432/keycloak?currentSchema=${KEYCLOAK_DB_SCHEMA}&searchPath=${KEYCLOAK_DB_SCHEMA}"
      KC_METRICS_ENABLED: 'true'
      KC_LOG_LEVEL: ${KC_LOG_LEVEL}
      KC_REALM_NAME: ${KC_REALM_NAME}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      GF_URL: ${GF_HOSTNAME}:${GF_SERVER_HTTP_PORT}
      GF_ADMIN_USERNAME: ${GF_ADMIN_USERNAME}
      GF_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD}
      KC_PROXY: edge
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: ${KC_PORT}
#      KC_HOSTNAME: auth.example.com  # Домен без порта
#      KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/conf/cert.pem
#      KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/conf/key.pem
#    Keycloak будет использовать https://auth.example.com:443.
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://keycloak:8080/health/ready" ]
#      interval: 5s
#      timeout: 20s
#      retries: 100
#      start_period: 20s
    ports:
      - ${KC_PORT}:8080
    volumes:
      - ./keycloak/realm.json:/opt/keycloak/data/import/realm.json:ro
#      - ./keycloak/keycloak.conf:/opt/keycloak/conf/keycloak.conf:z
    networks:
      - keycloak-grafana-prometheus-net
#    logging: *logging
#из сберфлоу:
#  keycloak:
  #    image: docker-dev.registry-ci.delta.sbrf.ru/ci02851867/ci04569532/baseimages/keycloak:20.0.3
  #    container_name: keycloak
  #    restart: on-failure
  #    depends_on:
  #      postgres:
  #        condition: service_healthy
  #    mem_limit: 800M
  #    volumes:
  #      - ./keycloak/quarkus-realm.json:/opt/keycloak/data/import/quarkus-realm.json:z
  #      - ./keycloak/keycloak.conf:/opt/keycloak/conf/keycloak.conf:z
  #    healthcheck:
  #      test: [ "CMD", "curl", "-f", "http://keycloak:8080/health/ready" ]
  #      interval: 5s
  #      timeout: 20s
  #      retries: 300
  #      start_period: 20s
  #    command: |
  #      "
  #      start-dev --import-realm
  #      "
  #    environment:
  #      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
  #      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
  #      PROXY_ADDRESS_FORWARDING: 'true'
  #      KEYCLOAK_DB_USERNAME: ${KEYCLOAK_DB_USERNAME}
  #      KEYCLOAK_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
  #      KEYCLOAK_DB_SCHEMA: ${KEYCLOAK_DB_SCHEMA}
  #      KEYCLOAK_DB_NAME: ${POSTGRES_DATABASE}
  #    ports:
  #      - "7766:8080"
  #    networks:
  #      - sberflow-net


  prometheus:
    container_name: prometheus
    image: docker.io/prom/prometheus:${PROMETHEUS_VERSION}
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.wal-compression'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "http://prometheus:9090/-/healthy"]
    ports:
      - ${PROMETHEUS_PORT}:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - keycloak-grafana-prometheus-net
#    logging: *logging

  grafana:
    container_name: grafana
    image: docker.io/grafana/grafana-oss:${GF_VERSION}
    restart: unless-stopped
    ports:
      - ${GF_SERVER_HTTP_PORT}:${GF_SERVER_HTTP_PORT}
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://grafana:${GF_SERVER_HTTP_PORT}/api/health"]
    environment:
      GF_SERVER_HTTP_PORT: ${GF_SERVER_HTTP_PORT}
      GF_LOG_LEVEL: ${GF_LOG_LEVEL}
      GF_AUTH_BASIC_ENABLED: true
      GF_AUTH_DISABLE_LOGIN_FORM: true
      GF_AUTH_GENERIC_OAUTH_TLS_SKIP_VERIFY_INSECURE: true
      GF_AUTH_GENERIC_OAUTH_ENABLED: true
      GF_AUTH_GENERIC_OAUTH_NAME: Keycloak
      GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: true
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "grafana"
      GF_AUTH_GENERIC_OAUTH_EMAIL_ATTRIBUTE_NAME: "email:primary"
      GF_AUTH_GENERIC_OAUTH_SCOPES: "openid profile email"
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: ${KC_HOSTNAME}:${KC_PORT}/realms/${KC_REALM_NAME}/protocol/openid-connect/auth
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: http://keycloak:${KC_PORT}/realms/${KC_REALM_NAME}/protocol/openid-connect/token
      GF_AUTH_GENERIC_OAUTH_API_URL: ${KC_HOSTNAME}:${KC_PORT}/realms/${KC_REALM_NAME}/protocol/openid-connect/userinfo
    volumes:
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - keycloak-grafana-prometheus-net
#    logging: *logging
#

networks:
  keycloak-grafana-prometheus-net:
    name: keycloak-grafana-prometheus-net
    driver: bridge