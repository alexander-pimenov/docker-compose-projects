# x-logging: &logging
#   driver: "k8s-file"
#   # driver: "json-file"
#   options:
#     max-size: "10m"
#     max-file: "3"

# Хорошая статья по настройке RabbitMQ compose: https://habr.com/ru/articles/703352/
# "RabbitMQ + Spring boot + Docker. Отправляем и получаем сообщения через Producer и Consumer. Пошаговое руководство"

# Мы добавили поле hostname, которое зафиксирует имя сервера и переменные окружения с указанием логина и пароля для
# авторизации (RABBITMQ_DEFAULT_USER и RABBITMQ_DEFAULT_PASS). После применения этих изменений авторизация под
# guest/guest будет невозможна.

# Срока restart: always — она даёт указание Docker автоматически перезагружать сервис в случае его внезапной
# остановки (полезно для прода, хотя на моей практике Rabbit падал только при неправильном конфигурировании).

# Если RabbitMQ попытается записать на диск, где нет места, это с 90% вероятностью уничтожит стейт без возможности
# восстановления. Поэтому настоятельно рекомендую для прод инсталляций переопределять это значение на хотя бы 2 гигабита
# (2147483648 бит). Это делается через переменную окружения RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS и поле
# disk_free_limit
# Конечно, пороговое значение подбирается индивидуально в зависимости от параметров сервера и характера нагрузки,
# но для начала поставить 2 гигабита — уже в 100 раз лучше, чем значение по умолчанию 48 MB.

# Добавим volume для сохранения стейта RabbitMQ локально на диск, чтобы стейт хранился на сервере, а не только внутри контейнера.

# ./rebbitmqdata значит, что папка со стейтом будет находиться в том же каталоге, что и файл docker-compose.yml.
# Это удобно при переносе окружений на другой сервер — всё в одной папке.

# Также открыли наружу AMQP порт 5672 и добавили уровень логирования error — по умолчанию там info, что
# слишком много для нагруженных систем. Отметим, что публиковать порт нужно не всегда. Если консьюмеры и паблишеры
# находятся внутри docker-compose или подключены к его сети, в этом нет необходимости.


services:
  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    restart: unless-stopped
#    hostname: rabbitmq
    ports:
      - 15672:15672
      - 5672:5672
    environment:
      RABBITMQ_DEFAULT_USER: rmuser
      RABBITMQ_DEFAULT_PASS: rmpassword
#      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit disk_free_limit 2147483648
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
    volumes:
      # Хранение данных rabbitmq в локальной директории ./rebbitmqdata. Таким образом, ваши данные будут сохраняться в
      # локальной папке, и вы не потеряете их, даже если контейнер Redis случайно удалится или вы потеряете к нему доступ.
      # Главное — обеспечить сохранность данных из папки rebbitmqdata.
      - ./rebbitmqdata:/var/lib/rabbitmq
      # - rebbitmq-data:/var/lib/rabbitmq
    networks:
      - rabbitmq-net


# Если не хотим завязываться на какой-то конкретной папке, где будут храниться данные работы rabbitmq, то можно
# просто создавать volumes классическим путем:
volumes:
  rabbitmq-data:

  
networks:
  rabbitmq-net:
    name: rabbitmq-net
    driver: bridge

  
